name: Intel6502
# description: The Intel 4004 is a 4-bit central processing unit (CPU) released by Intel Corporation in 1971

memory:
  internal:
    PC: 16
    AC: 8
    XX: 8
    YY: 8
    SR:
      NF: 1
      VF: 1
      IGF: 1
      BF:	1
      DF:	1
      IF:	1
      ZF:	1
      CF:	1
    SP: 8
  external:
    mem:
      words: 65536
      bits: 8

fetch:
  conditions:
  instructions:
    - "mem(PC)"

instructions:
  # ADC
  adc_immediate:
    code: 01101001
    asm: 01101001 AAAAAAAA
    instructions:
      - AC + mem(PC+1) + CF --> CF, AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
      # VF Overflow
  adc_zeropage:
    code: 01100101
    asm: 01100101 AAAAAAAA
    instructions:
      - AC + mem(mem(PC+1)) + CF --> CF, AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
      # VF Overflow
  adc_zeropage_x:
    code: 01110101
    asm: 01110101 AAAAAAAA
    instructions:
      - AC + mem(mem(PC+1)+XX) + CF --> CF, AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
      # VF Overflow
  adc_absolute:
    code: 01101101
    asm: 01101101 AAAAAAAA AAAAAAAA
    instructions:
      - AC + (mem(PC+2),mem(PC+1)) + CF --> CF, AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
      # VF Overflow
  adc_absolute_x: 
    code: 01111101
    asm: 01111101 AAAAAAAA AAAAAAAA
    instructions:
      - AC + ((mem(PC+2),mem(PC+1))+XX) + CF --> CF, AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
      # VF Overflow
  adc_absolute_y:
    code: 01111001
    asm: 01111001 AAAAAAAA AAAAAAAA
    instructions:
      - AC + ((mem(PC+2),mem(PC+1))+YY) + CF --> CF, AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
      # VF Overflow
  adc_indirect_x:
    code: 01100001
    asm: 01100001 AAAAAAAA AAAAAAAA
    instructions:
      - AC + (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX) + CF --> CF, AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
      # VF Overflow
  adc_indirect_y:
    code: 01110001
    asm: 01110001 AAAAAAAA AAAAAAAA
    instructions:
      - AC + (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY) + CF --> CF, AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
      # VF Overflow
  
  # AND
  and_immediate:
    code: 00101001 # 29
    asm: 00101001 AAAAAAAA
    instructions:
      - (AC & mem(PC+1)) --> AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  and_zeropage:
    code: 00100101 # 25
    asm: 00100101 AAAAAAAA
    instructions:
      - (AC & mem(mem(PC+1))) --> AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  and_zeropage_x:
    code: 00110101 # 35
    asm: 00110101 AAAAAAAA
    instructions:
      - (AC & mem(mem(PC+1)+XX)) --> AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  and_absolute:
    code: 00101101 # 2d
    asm: 00101101 AAAAAAAA AAAAAAAA
    instructions:
      - (AC & (mem(PC+2),mem(PC+1))) --> AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  and_absolute_x: 
    code: 00111101 # 3d
    asm: 00111101 AAAAAAAA AAAAAAAA
    instructions:
      - (AC & ((mem(PC+2),mem(PC+1))+XX)) --> AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  and_absolute_y:
    code: 00111001 # 39
    asm: 00111001 AAAAAAAA AAAAAAAA
    instructions:
      - (AC & ((mem(PC+2),mem(PC+1))+YY)) --> AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  and_indirect_x:
    code: 00100001 # 21
    asm: 00100001 AAAAAAAA
    instructions:
      - (AC & (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX)) --> AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  and_indirect_y:
    code: 00110001 # 31
    asm: 00110001 AAAAAAAA
    instructions:
      - (AC & (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY)) --> AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF

  # ASL
  asl_accumulator:
    code: 00001010
    asm: 00001010
    instructions:
      - (AC,0) --> CF, AC
      - PC+1 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  asl_zeropage:
    code: 00000110
    asm: 00000110 AAAAAAAA
    instructions:
      - (mem(mem(PC+1)),0) --> CF, AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  asl_zeropage_x:
    code: 00010110
    asm: 00010110 AAAAAAAA
    instructions:
      - (mem(mem(PC+1)+XX),0) --> CF, AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  asl_absolute:
    code: 00001110
    asm: 00001110 AAAAAAAA AAAAAAAA
    instructions:
      - ((mem(PC+2),mem(PC+1)),0) --> CF, AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  asl_absolute_x:
    code: 00011110
    asm: 00011110 AAAAAAAA AAAAAAAA
    instructions:
      - (((mem(PC+2),mem(PC+1))+XX),0) --> CF, AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  
  # BCC
  bcc_relative:
    code: 10010000 # 90
    asm: 10010000 AAAAAAAA
    instructions:
      - (CF == 0) ? PC+mem(PC+1)+(-128) --> PC

  # BCS
  bcs_relative:
    code: 10110000 # b0
    asm: 10110000 AAAAAAAA
    instructions:
      - (CF == 1) ? PC+mem(PC+1)+(-128) --> PC

  # BEQ
  beq_relative:
    code: 11110000 # f0
    asm: 11110000 AAAAAAAA
    instructions:
      - (ZF == 1) ? PC+mem(PC+1)+(-128) --> PC
  
  # BIT

  # BMI
  bmi_relative:
    code: 00110000 # 30
    asm: 00110000 AAAAAAAA
    instructions:
      - (NF == 1) ? PC+mem(PC+1)+(-128) --> PC

  # BNE
  bne_relative:
    code: 11010000 # d0
    asm: 11010000 AAAAAAAA
    instructions:
      - (ZF == 0) ? PC+mem(PC+1)+(-128) --> PC
  
  # BPL
  bpl_relative:
    code: 00010000 # 10
    asm: 00010000 AAAAAAAA
    instructions:
      - (NF == 0) ? PC+mem(PC+1)+(-128) --> PC
  
  # BRK

  # BVC
  bvc_relative:
    code: 01010000 # 50
    asm: 01010000 AAAAAAAA
    instructions:
      - (VF == 0) ? PC+mem(PC+1)+(-128) --> PC
  
  # BVS
  bvs_relative:
    code: 01110000 # 70
    asm: 01110000 AAAAAAAA
    instructions:
      - (VF == 1) ? PC+mem(PC+1)+(-128) --> PC
  
  # CLC
  clc_implied:
    code: 00011000 # 18
    asm: 00011000
    instructions:
      - 0 --> CF
      - PC+1 --> PC
  
  # CLD
  cld_implied:
    code: 11011000 # d8
    asm: 11011000
    instructions:
      - 0 --> DF
      - PC+1 --> PC
  
  # CLI
  cli_implied:
    code: 01011000 # 58
    asm: 01011000
    instructions:
      - 0 --> IF
      - PC+1 --> PC
  
  # CLV
  clv_implied:
    code: 10111000 # b8
    asm: 10111000
    instructions:
      - 0 --> VF
      - PC+1 --> PC

  # CMP
  cmp_immediate:
    code: 11001001 # c9
    asm: 11001001 AAAAAAAA
    instructions:
      - (AC < mem(PC+1)) ? 0 --> ZF
      - (AC < mem(PC+1)) ? 0 --> CF
      - (AC < mem(PC+1)) --> NF
      - (AC == mem(PC+1)) ? 1 --> ZF
      - (AC == mem(PC+1)) ? 1 --> CF
      - (AC == mem(PC+1)) ? 0 --> NF
      - (AC > mem(PC+1)) ? 0 --> ZF
      - (AC > mem(PC+1)) ? 1 --> CF
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  cmp_zeropage:
    code: 11000101 # c5
    asm: 11000101 AAAAAAAA
    instructions:
      - AC < mem(mem(PC+1)) ? 0 --> ZF
      - AC < mem(mem(PC+1)) ? 0 --> CF
      - AC < mem(mem(PC+1)) --> NF
      - AC == mem(mem(PC+1)) ? 1 --> ZF
      - AC == mem(mem(PC+1)) ? 1 --> CF
      - AC == mem(mem(PC+1)) ? 0 --> NF
      - AC > mem(mem(PC+1)) ? 0 --> ZF
      - AC > mem(mem(PC+1)) ? 1 --> CF
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  cmp_zeropage_x:
    code: 11010101 # d5
    asm: 11010101 AAAAAAAA
    instructions:
      - AC < mem(mem(PC+1)+XX) ? 0 --> ZF
      - AC < mem(mem(PC+1)+XX) ? 0 --> CF
      - AC < mem(mem(PC+1)+XX) --> NF
      - AC == mem(mem(PC+1)+XX) ? 1 --> ZF
      - AC == mem(mem(PC+1)+XX) ? 1 --> CF
      - AC == mem(mem(PC+1)+XX) ? 0 --> NF
      - AC > mem(mem(PC+1)+XX) ? 0 --> ZF
      - AC > mem(mem(PC+1)+XX) ? 1 --> CF
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  cmp_absolute:
    code: 11001101 # cd
    asm: 11001101 AAAAAAAA AAAAAAAA
    instructions:
      - AC < (mem(PC+2),mem(PC+1)) ? 0 --> ZF
      - AC < (mem(PC+2),mem(PC+1)) ? 0 --> CF
      - AC < (mem(PC+2),mem(PC+1)) --> NF
      - AC == (mem(PC+2),mem(PC+1)) ? 1 --> ZF
      - AC == (mem(PC+2),mem(PC+1)) ? 1 --> CF
      - AC == (mem(PC+2),mem(PC+1)) ? 0 --> NF
      - AC > (mem(PC+2),mem(PC+1)) ? 0 --> ZF
      - AC > (mem(PC+2),mem(PC+1)) ? 1 --> CF
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  cmp_absolute_x:
    code: 11011101 # dd
    asm: 11011101 AAAAAAAA AAAAAAAA
    instructions:
      - AC < (mem(PC+2),mem(PC+1)+XX) ? 0 --> ZF
      - AC < (mem(PC+2),mem(PC+1)+XX) ? 0 --> CF
      - AC < (mem(PC+2),mem(PC+1)+XX) --> NF
      - AC == (mem(PC+2),mem(PC+1)+XX) ? 1 --> ZF
      - AC == (mem(PC+2),mem(PC+1)+XX) ? 1 --> CF
      - AC == (mem(PC+2),mem(PC+1)+XX) ? 0 --> NF
      - AC > (mem(PC+2),mem(PC+1)+XX) ? 0 --> ZF
      - AC > (mem(PC+2),mem(PC+1)+XX) ? 1 --> CF
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  cmp_absolute_y:
    code: 11011001 # d9
    asm: 11011001 AAAAAAAA AAAAAAAA
    instructions:
      - AC < (mem(PC+2),mem(PC+1)+YY) ? 0 --> ZF
      - AC < (mem(PC+2),mem(PC+1)+YY) ? 0 --> CF
      - AC < (mem(PC+2),mem(PC+1)+YY) --> NF
      - AC == (mem(PC+2),mem(PC+1)+YY) ? 1 --> ZF
      - AC == (mem(PC+2),mem(PC+1)+YY) ? 1 --> CF
      - AC == (mem(PC+2),mem(PC+1)+YY) ? 0 --> NF
      - AC > (mem(PC+2),mem(PC+1)+YY) ? 0 --> ZF
      - AC > (mem(PC+2),mem(PC+1)+YY) ? 1 --> CF
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  cmp_indirect_x:
    code: 11000001 # c1
    asm: 11000001 AAAAAAAA
    instructions:
      - AC < (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX) ? 0 --> ZF
      - AC < (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX) ? 0 --> CF
      - AC < (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX) --> NF
      - AC == (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX) ? 1 --> ZF
      - AC == (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX) ? 1 --> CF
      - AC == (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX) ? 0 --> NF
      - AC > (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX) ? 0 --> ZF
      - AC > (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX) ? 1 --> CF
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  cmp_indirect_y:
    code: 11010001 # d1
    asm: 11010001 AAAAAAAA
    instructions:
      - AC < (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY) ? 0 --> ZF
      - AC < (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY) ? 0 --> CF
      - AC < (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY) --> NF
      - AC == (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY) ? 1 --> ZF
      - AC == (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY) ? 1 --> CF
      - AC == (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY) ? 0 --> NF
      - AC > (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY) ? 0 --> ZF
      - AC > (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY) ? 1 --> CF
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  
  # CPX
  # CPY
  # DEC
  # DEX
  # DEY
  # EOR
  # INC
  # INX
  inx_implied:
    code: 11101000 # e8
    asm: 11101000
    instructions:
      - XX + 1 --> XX
      - PC+1 --> PC
  # INY
  # JMP
  jmp_absolute:
    code: 1001100 # 4c
    asm: 1001100 AAAAAAAA
    instructions:
      - mem(PC +1) --> PC
  # JSR
  # LDA
  lda_immediate:
    code: 10101001 # a9
    asm: 10101001 AAAAAAAA
    instructions:
      - mem(PC+1) --> AC
      - PC+2 --> PC

  # LDX
  # LDY

  # LSR
  lsr_accumulator:
    code: 01001010 # 4a
    asm: 01001010
    instructions:
      - (0,AC) --> AC, CF
      - PC+1 --> PC
      - (AC == 0) --> ZF
  lsr_zeropage:
    code: 01000110 # 46
    asm: 01000110 AAAAAAAA
    instructions:
      - (0,mem(mem(PC+1))) --> AC, CF
      - PC+2 --> PC
      - (AC == 0) --> ZF
  lsr_zeropage_x:
    code: 01010110 # 56
    asm: 01010110 AAAAAAAA
    instructions:
      - (0,mem(mem(PC+1)+XX)) --> AC, CF
      - PC+2 --> PC
      - (AC == 0) --> ZF
  lsr_absolute:
    code: 01001110 # 4e
    asm: 01001110 AAAAAAAA AAAAAAAA
    instructions:
      - (0,(mem(PC+2),mem(PC+1))) --> AC, CF
      - PC+3 --> PC
      - (AC == 0) --> ZF
  lsr_absolute_x:
    code: 01011110 # 5e
    asm: 00011110 AAAAAAAA AAAAAAAA
    instructions:
      - (0,((mem(PC+2),mem(PC+1))+XX)) --> AC, CF
      - PC+3 --> PC
      - (AC == 0) --> ZF
  
  # NOP

  # ORA
  ora_immediate:
    code: 00001001
    asm: 00001001 AAAAAAAA
    instructions:
      - AC | mem(PC+1) --> AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  ora_zeropage:
    code: 00000101
    asm: 00000101 AAAAAAAA
    instructions:
      - AC | mem(mem(PC+1)) --> AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  ora_zeropage_x:
    code: 00010101
    asm: 00010101 AAAAAAAA
    instructions:
      - AC | mem(mem(PC+1)+XX) --> AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  ora_absolute:
    code: 00001101
    asm: 00001101 AAAAAAAA AAAAAAAA
    instructions:
      - AC | (mem(PC+2),mem(PC+1)) --> AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  ora_absolute_x:
    code: 00011101
    asm: 00011101 AAAAAAAA AAAAAAAA
    instructions:
      - AC | ((mem(PC+2),mem(PC+1))+XX) --> AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  ora_absolute_y:
    code: 00011001
    asm: 00011001 AAAAAAAA AAAAAAAA
    instructions:
      - AC | (mem(mem(PC+2)+YY),mem(mem(PC+1)+YY)) --> AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  ora_indirect_x:
    code: 00000001
    asm: 00000001 AAAAAAAA
    instructions:
      - AC | (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+XX) --> AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  ora_indirect_y:
    code: 00010001
    asm: 00010001 AAAAAAAA
    instructions:
      - AC | (mem(mem(mem(PC+2))),mem(mem(mem(PC+1)))+YY) --> AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF

  # PHA
  # PHP
  # PLA
  # PLP

  # ROL
  rol_accumulator:
    code: 00101010 # 2a
    asm: 00101010
    instructions:
      - (AC,CF) --> CF, AC
      - PC+1 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  rol_zeropage:
    code: 00100110 # 26
    asm: 00100110 AAAAAAAA
    instructions:
      - (mem(mem(PC+1)),CF) --> CF, AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  rol_zeropage_x:
    code: 00110110 # 36
    asm: 00110110 AAAAAAAA
    instructions:
      - (mem(mem(PC+1)+XX),CF) --> CF, AC
      - PC+2 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  rol_absolute:
    code: 00101110 # 2e
    asm: 00101110 AAAAAAAA AAAAAAAA
    instructions:
      - ((mem(PC+2),mem(PC+1)),CF) --> CF, AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF
  rol_absolute_x:
    code: 00111110 # 3e
    asm: 00111110 AAAAAAAA AAAAAAAA
    instructions:
      - (((mem(PC+2),mem(PC+1))+XX),CF) --> CF, AC
      - PC+3 --> PC
      - (AC & 128) > 0 --> NF
      - (AC == 0) --> ZF

  # ROR
  ror_accumulator:
    code: 01101010 # 6a
    asm: 01101010
    instructions:
      - (CF,AC) --> AC, CF
      - PC+1 --> PC
      - (AC == 0) --> ZF
  ror_zeropage:
    code: 01100110 # 66
    asm: 01100110 AAAAAAAA
    instructions:
      - (CF,mem(mem(PC+1))) --> AC, CF
      - PC+2 --> PC
      - (AC == 0) --> ZF
  ror_zeropage_x:
    code: 01110110 # 76
    asm: 01110110 AAAAAAAA
    instructions:
      - (CF,mem(mem(PC+1)+XX)) --> AC, CF
      - PC+2 --> PC
      - (AC == 0) --> ZF
  ror_absolute:
    code: 01101110 # 6e
    asm: 01101110 AAAAAAAA AAAAAAAA
    instructions:
      - (CF,(mem(PC+2),mem(PC+1))) --> AC, CF
      - PC+3 --> PC
      - (AC == 0) --> ZF
  ror_absolute_x:
    code: 01111110 # 7e
    asm: 01111110 AAAAAAAA AAAAAAAA
    instructions:
      - (CF,((mem(PC+2),mem(PC+1))+XX)) --> AC, CF
      - PC+3 --> PC
      - (AC == 0) --> ZF

  # RTI
  # RTS
  # SBC
  # SEC
  # SED
  # SEI
  # STA
  sta_zeropage:
    code: 10000101 # 85
    asm: 10000101
    instructions:
      - AC --> mem(mem(PC)+1)
      - PC+2 --> PC

  sta_absolute:
    code: 10001101 # 8d
    asm: 10001101 AAAAAAAA AAAAAAAA
    instructions:
      - AC --> (mem(PC+2),mem(PC+1))
      - PC+3 --> PC
  # STX
  # STY
  # TAX
  # TAY
  # TSX
  # TXA
  # TXS
  # TYA


# display: |
#   "         STACK                REGISTERS\n\
#        PC 0x{PC}          R0 R1 0x{R0} 0x{R1}   R8 R9 0x{R8} 0x{R9}\n\
#   LEVEL 1 0x{STACK0}          R2 R3 0x{R2} 0x{R3}   RA RB 0x{R10} 0x{R11}\n\
#   LEVEL 2 0x{STACK1}          R4 R5 0x{R4} 0x{R5}   RA RB 0x{R12} 0x{R13}\n\
#   LEVEL 3 0x{STACK2}          R6 R7 0x{R6} 0x{R7}   RA RB 0x{R14} 0x{R15}\n\
#   \n\
#   ACCUMULATOR: {ACC} [0b{ACC}]  CARRY: 0b{CY}\n"