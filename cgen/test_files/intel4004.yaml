name: Intel4004
description: The Intel 4004 is a 4-bit central processing unit (CPU) released by Intel Corporation in 1971

memory:
  internal:
    ACC: 4 # 4 bit
    CY: 1 # 1 bit
    REGISTER[8]: # implicit 64 bit
      P{$0}: # implicit 8 bit
        R{2*$0+1}: 4
        R{2*$0}: 4
    PC: # implicit 12 bit
      PL: 4
      PM: 4
      PH: 4
    CM: 4
    STACK[3]:
      STACK{$0}: 12
    SRC:
      X2:
        SRC_CHIP: 2
        SRC_REG: 2
      X3:
        SRC_ADDR: 4
    TEST: 1
  external:
    rom:
      words: 4096
      bits: 8
    ram:
      words: 2048
      bits: 4
    ram_status:
      words: 512
      bits: 4
    ram_port:
      words: 32
      bits: 4
    rom_port:
      words: 16
      bits: 4

fetch:
  instructions:
    - "rom(PC)"

instructions:
  nop:
    code: 0000 0000
    asm: 00000000
    description: No Operation
    instructions:
      - PC + 1 --> PC
  jcn:
    description: |
      If the designated condition code is true, program control is transferred to the instruction 
      located at the 8 bit address A2A2A2A2, A1A1A1A1 on the same page (ROM) where JCN is located.
      If the condition is not true the next instruction in sequence after JCN is executed.
      The condition bits are assigned as follows:
      I = 0 Do not invert jump condition
      I = 1 Invert jump condition
      Z = 1 Jump if the accumulator content is zero
      O = 1 Jump if the carry/link content is 1
      T = 1 Jump if test signal (pin 10 on 4004) is zero.
    code: 0001 IZOT
    asm: 0001CCCC AAAAAAAA
    conditions:
      - zero = Z && (I ^ (ACC==0))
      - carry = O && ( I ^ (CY==1))
      - test = T && (I ^ (TEST==0))
      - jump = zero + carry + test
      - nextpage = (PM, PL) >= 254
    instructions:
      - "!jump? PC + 2 --> PC"
      - jump ? rom(PC+1) --> PM,PL
      - jump && nextpage ? PH +1 --> PH
  fim:
    description: |
      Load 8-bits of data which are loaded into the designated index register pair from ROM.
    code: 0010 RRR0
    asm: 0010RRR0 DDDDDDDD
    instructions:
      - rom(PC+1) --> P{R}
      - PC+2 --> PC
  src:
    description: |
      The 8 bit content of the designated index register pair is sent to 
      the RAM address register at X2 and X3. A subsequent read, write, 
      or I/O operation of the RAM will utilize this address. Specifically, 
      the first 2 bits of the address designatea RAM chip; the second 2 bits 
      designate 1 out of 4 registers within the chip; the last 4 bits designate 
      1 out of 16 4-bit main memory characters within the register. This command 
      is also used to designate a ROM for a subsequent ROM I/O port operation. 
      The first 4 bits designate the ROM chip number to be selected. The address 
      in ROM or RAM is not cleared until the next SRC instruction is executed. 
      The 8 bit content of the index register is unaffected.
    code: 0010 RRR1
    asm: 0010RRR1
    instructions:
      - P{R} --> SRC
      - PC+1 --> PC
  fin:
    description: |
      The 8 bit content of the 0 index register pair (0000) (0001) is sent out as 
      an address in the same page where the FIN instruction is located. The 8 bit 
      word at that location is loaded into the designated index register pair. 
      The program counter is unaffected; after FIN has been executed the next 
      instruction in sequence will be addressed. The content of the 0 index 
      register pair is unaltered unless index register 0 was designated.
    code: 0011 RRR0
    asm: 0011RRR0
    instructions:
      - PC+1 --> PC
      - rom((PH, P0)) --> P{R}
  jin:
    description: |
      The 8 bit content of the designated index register pair is loaded 
      into the low order 8 positions of the program counter. Program control 
      is transferred to the instruction at that address on the same page (same ROM) 
      where the JIN instruction is located. The 8 bit content of the index register is unaffected.
    code: 0011 RRR1
    asm: 0011RRR1
    instructions:
      - PC +1 --> PC
      - R{2*R} --> PM
      - R{2*R+1} --> PL
  jun:
    description: Jump unconditional
    code: 0100 AAAA
    asm: 0100AAAA AAAAAAAA
    instructions:
      - (A, rom(PC+1))--> PC
  jms:
    description: |
      The address of the next instruction in sequence following JMS (return address)
      is saved in the push down stack. Program control is transferred to the instruction 
      located at the 12 bit address (A3A3A3A3A2A2A2A2A1A1A1A1). Execution of a return 
      instruction (BBL) will cause the saved address to be pulled out of the stack, 
      therefore, program control is transferred to the next sequential instruction after 
      the last JMS. The push down stack has 4 registers. One of them is used as the program 
      counter, therefore nesting of JMS can occur up to 3 levels.
    code: 0101 AAAA
    asm: 0101AAAA AAAAAAAA
    instructions:
      - STACK1 --> STACK2
      - STACK0 --> STACK1
      - PC + 2 --> STACK0
      - (A, rom(PC+1))--> PC
  inc:
    description: |
      The 4 bit content of the designated index register is incremented by 1. 
      The index register is set to zero in case of overflow. The carry/link is unaffected.
    code: 0110 RRRR
    asm: 0110RRRR
    instructions:
      - R{R} + 1 --> R{R}
      - PC +1 --> PC
  isz:
    description: |
      The content of the designated index register is incremented by 1. The accumulator and 
      carry/link are unaffected. If the result is zero, the next instruction after ISZ is 
      executed. If the result is different from 0, program control is transferred to the 
      instruction located at the 8 bit address A2A2A2A2, A1A1A1A1 on the same page (ROM) 
      where the ISZ instruction is located.
    code: 0111 RRRR
    asm: 0111RRRR AAAAAAAA
    instructions:
      - R{R} + 1 --> R{R}
      - R{R} == 0 ? PC +2 --> PC
      - R{R} != 0 ? rom(PC+1) --> PM,PL
  add:
    description: |
      The 4 bit content of the designated index register is added to the content of the 
      accumulator with carry. The result is stored in the accumulator. The carry/link is 
      set to 1 if a sum greater than 15 was generated to indicate a carry out; otherwise, 
      the carry/link is set to 0. The 4 bit content of the index register is unaffected.
    code: 1000 RRRR
    asm: 1000RRRR
    instructions:
      - R{R} + ACC + CY --> CY,ACC
      - PC +1 --> PC
  sub:
    description: |
      The 4 bit content of the designated index register is complemented (ones complement) 
      and added to content of the accumulator with borrow and the result is stored in the 
      accumulator. If a borrow is generated, the carry bit is set to 0; otherwise, it is 
      set to 1. The 4 bit content of the index register is unaffected.
    code: 1001 RRRR
    asm: 1001RRRR
    instructions:
      - (~R{R} + ACC + ~CY) --> CY,ACC
      - PC +1 --> PC
  ld:
    description: |
      The 4 bit content of the designated index register (RRRR) is loaded into 
      accumulator. The previous contents of the accumulator are lost. The 4 bit 
      content of the index register and the carry/link bit are unaffected.
    code: 1010 RRRR
    asm: 1010RRRR
    instructions:
      - R{R} --> ACC
      - PC+1 --> PC
  xch:
    description: |
      The 4 bit content of designated index register is loaded into the accumulator. 
      The prior content of the accumulator is loaded into the designed register. 
      The carry/link bit is unaffected.
    code: 1011 RRRR
    asm: 1011RRRR
    instructions:
      - (ACC, R{R}) --> R{R}, ACC
      - PC +1 --> PC
  bbl:
    description: |
      The program counter (address stack) is pushed down one level. Program control 
      transfers to the next instruction following the last jump to subroutine (JMS) 
      instruction. The 4 bits of data DDDD stored in the OPA portion of the instruction 
      are loaded to the accumulator.

      BBL is used to return from subroutine to main program.
    code: 1100 DDDD
    asm: 1100DDDD
    instructions:
      - D --> ACC
      - STACK0 --> PC
      - STACK1 --> STACK0
      - STACK2 --> STACK1
      - 0 --> STACK2
  ldm:
    description: |
      The 4 bits of data, DDDD stored in the OPA field of instruction
      word are loaded into the accumulator. The previous contents of the
      accumulator are lost. The carry/link bit is unaffected.
    code: 1101 DDDD
    asm: 1101DDDD
    instructions:
      - D --> ACC
      - PC+1 --> PC
  wrm:
    description: |
      The accumulator content is written into the previously selected RAM 
      main memory character location. The accumulator and carry/link are unaffected.
    code: 1110 0000
    asm: 11100000
    instructions:
      - ACC --> ram((CM, SRC))
      - PC+1 --> PC
  wmp:
    description: |
      The content of the accumulator is transferred to the RAM output port 
      of the previously selected RAM chip. The data is available on the 
      output pins until a new WMP is executed on the same RAM chip. The 
      content of the ACC and the carry/link are unaramffected. 
      (The LSB bit of the accumultor appears on O0, Pin 16, of the 4002.)
    code: 1110 0001
    asm: 11100001
    instructions:
      - ACC --> ram_port(CM)
      - PC+1 --> PC
  wrr:
    description: |
      The content of the accumulator is transferred to the ROM output port of 
      the previously selected ROM chip. The data is available on the output 
      pins until a new WRR is executed on the same chip. The ACC content and 
      carry/link are unaffected. (The LSB bit of the accumulator appears on 
      I/O0, pin 16, of the 4001). No operation is performed on I/O lines coded 
      as inputs.    
    code: 1110 0010
    asm: 11100010
    instructions:
      - ACC --> rom_port(X2)
      - PC+1 --> PC
  wr0:
    description: |
      The content of the accumulator is written into the RAM status character 
      0 of the previously selected RAM register. The accumulator and the carry/link 
      are unaffected.
    code: 1110 0100
    asm: 11100100
    instructions:
      - ACC --> ram_status((X2, 0b00))
      - PC +1 --> PC
  wr1:
    description: |
      The content of the accumulator is written into the RAM status character 
      1 of the previously selected RAM register. The accumulator and the carry/link 
      are unaffected.
    code: 1110 0101
    asm: 11100101
    instructions:
      - ACC --> ram_status((X2, 0b01))
      - PC +1 --> PC
  wr2:
    description: |
      The content of the accumulator is written into the RAM status character 
      2 of the previously selected RAM register. The accumulator and the carry/link 
      are unaffected.
    code: 1110 0110
    asm: 11100110
    instructions:
      - ACC --> ram_status((X2, 0b10))
      - PC +1 --> PC
  wr3:
    description: |
      The content of the accumulator is written into the RAM status character 
      3 of the previously selected RAM register. The accumulator and the carry/link 
      are unaffected.
    code: 1110 0111
    asm: 11100111
    instructions:
      - ACC --> ram_status((X2, 0b11))
      - PC +1 --> PC
  sbm:
    description: |
      The content of the previously selected RAM character is subtracted from the 
      accumulator with borrow. The RAM character is unaffected.    
    code: 1110 1000
    asm: 11101000
    instructions:
      - (~ram((CM, SRC)) + ACC + ~CY) --> CY,ACC
      - PC +1 --> PC
  rdm:
    description: |
      The content of the previously selected RAM main memory character is transferred 
      to the accumulator. The carry/link is unaffected. The 4-bit data in memory is unaffected.
    code: 1110 1001
    asm: 11101001
    instructions:
      - ram((CM, SRC)) --> ACC
      - PC+1 --> PC
  rdr:
    description: |
      The data present at the input lines of the previously selected ROM chip is transferred to 
      the accumulator. The carry/link is unaffected. If the I/O option has both inputs and outputs 
      within the same 4 I/O lines, the user can choose to have either "0" or "1" transferred to the 
      accumulator for those I/O pins coded as outputs, when an RDR instruction is executed.    
    code: 1110 1010
    asm: 11101010
    instructions:
      - rom_port(X2) --> ACC
      - PC+1 --> PC
  adm:
    description: |
      The content of the previously selected RAM main memory character is added to the accumulator 
      with carry. The RAM character is unaffected.
    code: 1110 1011
    asm: 11101011
    instructions:
      - ram((CM, SRC)) + ACC + CY --> CY,ACC
      - PC +1 --> PC
  rd0:
    description: |
      The 4-bits of status character 0 for the previously selected RAM register are transferred 
      to the accumulator. The carry/link and the status character are unaffected.    
    code: 1110 1100
    asm: 11101100
    instructions:
      - ram_status((X2, 0b00)) --> ACC 
      - PC +1 --> PC
  rd1:
    description: |
      The 4-bits of status character 1 for the previously selected RAM register are transferred 
      to the accumulator. The carry/link and the status character are unaffected.    
    code: 1110 1101
    asm: 11101101
    instructions:
      - ram_status((X2, 0b01)) --> ACC 
      - PC +1 --> PC
  rd2:
    description: |
      The 4-bits of status character 0 for the previously selected RAM register are transferred 
      to the accumulator. The carry/link and the status character are unaffected.    
    code: 1110 1110
    asm: 11101110
    instructions:
      - ram_status((X2, 0b10)) --> ACC 
      - PC +1 --> PC
  rd3:
    description: |
      The 4-bits of status character 0 for the previously selected RAM register are transferred 
      to the accumulator. The carry/link and the status character are unaffected.    
    code: 1110 1111
    asm: 11101111
    instructions:
      - ram_status((X2, 0b11)) --> ACC 
      - PC +1 --> PC
  clb:
    description: Set accumulator and carry/link to 0.
    code: 1111 0000
    asm: 11110000
    instructions:
      - 0 --> ACC
      - 0 --> CY
      - PC+1 --> PC
  clc:
    description: Clear Carry
    code: 1111 0001
    asm: 11110001
    instructions:
      - 0 --> CY
      - PC+1 --> PC
  cmc:
    description: Complement Carry
    code: 1111 0011
    asm: 11110011
    instructions:
      - ~CY --> CY
      - PC+1 --> PC
  stc:
    description: Set Carry
    code: 1111 1010
    asm: 11111010
    instructions:
      - 1 --> CY
      - PC+1 --> PC
  cma:
    description: Complement Accumulator
    code: 1111 0100
    asm: 11110100
    instructions:
      - ~ACC --> ACC
      - PC+1 --> PC
  iac:
    description: Increment Accumulator
    code: 1111 0010
    asm: 11110010
    instructions:
      - ACC+1 --> CY,ACC
      - PC+1 --> PC
  dac:
    description: Decrement Accumulator
    code: 1111 1000
    asm: 11111000
    instructions:
      - ACC+0b1111 --> CY,ACC
      - PC+1 --> PC
  ral:
    description: |
      The content of the accumulator and carry/link are rotated left.
    code: 1111 0110
    asm: 11110110
    instructions:
      - (CY,ACC) --> ACC,CY
      - PC+1 --> PC
  rar:
    description: |
      The content of the accumulator and carry/link are rotated right.
    code: 1111 0110
    asm: 11110110
    instructions:
      - (ACC,CY) --> CY,ACC
      - PC+1 --> PC
  tcc:
    description: |
      The accumulator is cleared. The least significant position of 
      the accumulator is set to the value of the carry/link.
      The carry/link is set to 0.
    code: 1111 0111
    asm: 11110111
    instructions:
      - 0 --> ACC
      - CY --> ACC
      - 0 --> CY
      - PC+1 --> PC
  daa:
    description: |
      The accumulator is incremented by 6 if either the carry/link is 1 
      or if the accumulator content is greater than 9.
      The carry/link is set to a 1 if the result generates a carry, 
      otherwise it is unaffected.
    code: 1111 1011
    asm: 11111011
    conditions:
      - inc = CY == 1 || ACC > 9
    instructions:
      - inc? ACC + 6 --> CY,ACC
  tcs:
    description: |
      The accumulator is set to 9 if the carry/link is 0.
      The accumulator is set to 10 if the carry/link is a 1.
      The carry/link is set to 0.
    code: 1111 1001
    asm: 11111001
    instructions:
      - CY == 0 ? 0b1001 --> ACC
      - CY == 1 ? 0b1010 --> ACC
      - 0 --> CY
      - PC+1 --> PC
  kbp:
    description: The Accumulator will be set to the position of the first bit. If
      more than one bit is set the Accumulator will be set to 15
    code: 1111 1100
    asm: 11111100
    conditions:
      - keep = ACC < 3
      - four = ACC == 4
      - eight = ACC == 8
      - error = !keep && !four && !eight
    instructions:
      - four ? 3 --> ACC
      - eight ? 4 --> ACC
      - error ? 15 --> ACC
      - PC+1 --> PC
  dcl:
    description: | 
      The content of the three least significant accumulator bits is
      transferred to the CM-RAM output lines on the cpu.
      This instruction provides RAM bank selection when multiple RAM
      banks are used. When the CPU is reset, RAM Bank zero is auto-
      matically selected. DCL remains latched until it is changed or
      reset.
    code: 1111 1101
    asm: 11111101
    instructions:
      - ACC == 0 ? 1 --> CM
      - ACC != 0 ? (ACC, 0b0) --> CM
      - PC+1 --> PC
      
display:  |
  "         STACK                REGISTERS
       PC 0x{PC}          R0 R1 0x{R0} 0x{R1}   R8 R9 0x{R8} 0x{R9}
  LEVEL 1 0x{STACK0}          R2 R3 0x{R2} 0x{R3}   RA RB 0x{R10} 0x{R11}
  LEVEL 2 0x{STACK1}          R4 R5 0x{R4} 0x{R5}   RA RB 0x{R12} 0x{R13}
  LEVEL 3 0x{STACK2}          R6 R7 0x{R6} 0x{R7}   RA RB 0x{R14} 0x{R15}

  ACCUMULATOR: {ACC} [0b{ACC}]  CARRY: 0b{CY}\n\n"