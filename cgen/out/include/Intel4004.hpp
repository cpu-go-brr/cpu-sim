//Autogenerated header for the Intel4004
#pragma once

#include <stdarg.h>
#include "settings.hpp"
#ifndef C_ONLY
#include <string>
#include <vector>

#endif
#include "AddressInfo.hpp"
#include "AddressInfos.hpp"
#include "bitset.hpp"

#include "size_t.hpp"

class Intel4004
{
   public:   //our internal CPU memory (registers, PC ..)
   uint8_t memory[17] = {};

   Intel4004();

   //function pointer
   typedef void (Intel4004::*op)();

void simulate(std::size_t bytes = 1);
void display();
bitset fetch();
/* rom */
bitset rom_mem[4096];
bitset& rom(AddressInfo info);
bitset& rom(bitset index);
void flash_rom(std::vector<bitset> data);

/* ram */
bitset ram_mem[2048];
bitset& ram(AddressInfo info);
bitset& ram(bitset index);
void flash_ram(std::vector<bitset> data);

/* ram_status */
bitset ram_status_mem[512];
bitset& ram_status(AddressInfo info);
bitset& ram_status(bitset index);
void flash_ram_status(std::vector<bitset> data);

/* ram_port */
bitset ram_port_mem[32];
bitset& ram_port(AddressInfo info);
bitset& ram_port(bitset index);
void flash_ram_port(std::vector<bitset> data);

/* rom_port */
bitset rom_port_mem[16];
bitset& rom_port(AddressInfo info);
bitset& rom_port(bitset index);
void flash_rom_port(std::vector<bitset> data);

const char* bin(AddressInfo info);
const char* hex(AddressInfo info);
const char* dec(AddressInfo info);
   //functions
   bitset get(AddressInfo info);
   void set(bitset data, AddressInfo info);
   void set(bitset data, int nums, ...);
   void set(bitset data, bitset& dest);
   template <SIZE_T C>
   void nop();
   template <SIZE_T C>
   void jcn();
   template <SIZE_T C>
   void fim();
   template <SIZE_T C>
   void src();
   template <SIZE_T C>
   void fin();
   template <SIZE_T C>
   void jin();
   template <SIZE_T C>
   void jun();
   template <SIZE_T C>
   void jms();
   template <SIZE_T C>
   void inc();
   template <SIZE_T C>
   void isz();
   template <SIZE_T C>
   void add();
   template <SIZE_T C>
   void sub();
   template <SIZE_T C>
   void ld();
   template <SIZE_T C>
   void xch();
   template <SIZE_T C>
   void bbl();
   template <SIZE_T C>
   void ldm();
   template <SIZE_T C>
   void wrm();
   template <SIZE_T C>
   void wmp();
   template <SIZE_T C>
   void wrr();
   template <SIZE_T C>
   void wr0();
   template <SIZE_T C>
   void wr1();
   template <SIZE_T C>
   void wr2();
   template <SIZE_T C>
   void wr3();
   template <SIZE_T C>
   void sbm();
   template <SIZE_T C>
   void rdm();
   template <SIZE_T C>
   void rdr();
   template <SIZE_T C>
   void adm();
   template <SIZE_T C>
   void rd0();
   template <SIZE_T C>
   void rd1();
   template <SIZE_T C>
   void rd2();
   template <SIZE_T C>
   void rd3();
   template <SIZE_T C>
   void clb();
   template <SIZE_T C>
   void clc();
   template <SIZE_T C>
   void cmc();
   template <SIZE_T C>
   void stc();
   template <SIZE_T C>
   void cma();
   template <SIZE_T C>
   void iac();
   template <SIZE_T C>
   void dac();
   template <SIZE_T C>
   void ral();
   template <SIZE_T C>
   void rar();
   template <SIZE_T C>
   void tcc();
   template <SIZE_T C>
   void daa();
   template <SIZE_T C>
   void tcs();
   template <SIZE_T C>
   void kbp();
   template <SIZE_T C>
   void dcl();

static Intel4004::op ops[256];

};