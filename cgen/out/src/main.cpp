#include "Intel4004.hpp"
#include <iostream>
int main(int argc, char **argv)
{
    Intel4004 cpu;
    // [[maybe_unused]] auto A = bitset(0b0001, 4);
    // [[maybe_unused]] auto B = bitset(0b0011, 8); 

    // bitset a{0xFFFFFFF,23};   
    // char buffer[5] = {};
    // AddressInfo info;
    // info.bit_offset = 6;
    // info.byte_start = 0;
    // info.length = 22;
    // a.write((uint8_t*)&buffer[0],info);

    // std::cout <<(int) ((unsigned char)buffer[0])  << "\n";
    // std::cout <<(int) ((unsigned char)buffer[1])  << "\n";
    // std::cout <<(int) ((unsigned char)buffer[2])  << "\n";
    // std::cout <<(int) ((unsigned char)buffer[3])  << "\n";
    // std::cout <<(int) ((unsigned char)buffer[4])  << "\n";

    // auto res = get_mem((uint8_t*)&buffer[0], info);
    // std::cout << res.bin() << "\n";
    // cpu.flash_rom({0b11010001});
    // std::cout << (cpu.rom(cpu.get(PC)+1)).bin() << "\n";
    // std::cout << (A,cpu.rom(cpu.get(PC)+1)).bin() << "\n";
    
    // for(int i = 0; i < 17; i++)
    // std::cout << (int) cpu.memory[i] << "\n";
    // cpu.display();
    cpu.flash_rom({0x28, 0x00, 0x29, 0xEA, 0xB0, 0x68, 0x29, 0xEA, 0xB1, 0x50, 0x68, 0xB2, 0xE1, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xB2, 0xD4, 0xB0, 0xF6, 0xB0, 0x1A, 0x7A, 0xB1, 0xF6, 0xB1, 0xB2, 0xF6, 0xB2, 0xF8, 0x1C, 0x6B, 0xC0, 0xB1, 0xF6, 0xB1, 0xF1, 0x40, 0x73});

    // cpu.set(PC, (0xABC));

    //     std::cout << cpu.get(PC).hex() << "\n";

    // cpu.display();
    for (int i = 100; i --> 0;)
    {
        // std::getchar();
        cpu.display();
        cpu.simulate(1);
    }

    return 0;
}