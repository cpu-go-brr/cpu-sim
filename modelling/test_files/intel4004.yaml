name: Intel4004
description: The Intel 4004 is a 4-bit central processing unit (CPU) released by Intel Corporation in 1971

memory:
  ACC: 4 # 4 bit
  CY: 1 # 1 bit
  REGISTER[8]: # implicit 64 bit
   P{$0}:  # implicit 8 bit
      R{2*$0+1}: 4
      R{2*$0}: 4
  PC: # implicit 12 bit
    PL: 4
    PM: 4    
    PH: 4    
  CM: 3
  STACK[3]:
    STACK{$0}: 12
  SRC:
    SRC_CHIP: 2
    SRC_REG: 2
    SRC_ADDR: 4
  TEST: 1

fetch:
  conditions:
  instructions:
    - "rom(PC)"

instructions:
  nop:  
    code: 0000 0000
    description: No Operation
    instructions:
      - PC + 1 --> PC
  jcn:
    description: |
      If the designated condition code is true, program control is transferred to the instruction 
      located at the 8 bit address A2A2A2A2, A1A1A1A1 on the same page (ROM) where JCN is located.
      If the condition is not true the next instruction in sequence after JCN is executed.
      The condition bits are assigned as follows:
      I = 0 Do not invert jump condition
      I = 1 Invert jump condition
      Z = 1 Jump if the accumulator content is zero
      O = 1 Jump if the carry/link content is 1
      T = 1 Jump if test signal (pin 10 on 4004) is zero.
    code: 0001 IZOT
    conditions:
      - zero = Z && (I ^ (ACC!=0))
      - carry = O && ( I ^ (CY==0))
      - test = T && (I ^ (TEST!=0))
      - jump = zero + carry + test
    instructions:
      - PC + 2 --> PC
      - jump ? rom(PC+1) --> {PM,PL}
  fim:
    description: |
      Load 8-bits of data which are loaded into the designated index register pair from ROM.
    code: 0010 RRR0
    instructions:
      - rom(PC+1) --> P{R}
      - PC+2 --> PC  
  src:
    description: |
      The 8 bit content of the designated index register pair is sent to 
      the RAM address register at X2 and X3. A subsequent read, write, 
      or I/O operation of the RAM will utilize this address. Specifically, 
      the first 2 bits of the address designatea RAM chip; the second 2 bits 
      designate 1 out of 4 registers within the chip; the last 4 bits designate 
      1 out of 16 4-bit main memory characters within the register. This command 
      is also used to designate a ROM for a subsequent ROM I/O port operation. 
      The first 4 bits designate the ROM chip number to be selected. The address 
      in ROM or RAM is not cleared until the next SRC instruction is executed. 
      The 8 bit content of the index register is unaffected.
    code: 0010 RRR1
    instructions:
      - P{R} --> SRC
      - PC+1 --> PC
  fin:
    description: |
      The 8 bit content of the 0 index register pair (0000) (0001) is sent out as 
      an address in the same page where the FIN instruction is located. The 8 bit 
      word at that location is loaded into the designated index register pair. 
      The program counter is unaffected; after FIN has been executed the next 
      instruction in sequence will be addressed. The content of the 0 index 
      register pair is unaltered unless index register 0 was designated.
    code: 0011 RRR0
    instructions:
      - PC+1 --> PC
      - rom((PH, P0)) --> P{R}
  jin:
    description: |
      The 8 bit content of the designated index register pair is loaded 
      into the low order 8 positions of the program counter. Program control 
      is transferred to the instruction at that address on the same page (same ROM) 
      where the JIN instruction is located. The 8 bit content of the index register is unaffected.
    code: 0011 RRR1
    instructions:
      - PC +1 --> PC
      - R{2*R} --> PM
      - R{2*R+1} --> PL
  jun:
    description: Jump unconditional
    code: 0100 AAAA
    instructions:
      - (A, rom(PC+1))--> PC

  jms:
    description: |
      The address of the next instruction in sequence following JMS (return address)
      is saved in the push down stack. Program control is transferred to the instruction 
      located at the 12 bit address (A3A3A3A3A2A2A2A2A1A1A1A1). Execution of a return 
      instruction (BBL) will cause the saved address to be pulled out of the stack, 
      therefore, program control is transferred to the next sequential instruction after 
      the last JMS. The push down stack has 4 registers. One of them is used as the program 
      counter, therefore nesting of JMS can occur up to 3 levels.
    code: 0101 AAAA
    instructions:
      - STACK1 --> STACK2
      - STACK0 --> STACK1
      - PC + 2 --> STACK0
      - (A, rom(PC+1))--> PC
  inc:
    description: |
      The 4 bit content of the designated index register is incremented by 1. 
      The index register is set to zero in case of overflow. The carry/link is unaffected.
    code: 0110 RRRR
    instructions:
      - R{R} + 1 --> R{R}
      - PC +1 --> PC
  isz:
    description: |
      The content of the designated index register is incremented by 1. The accumulator and 
      carry/link are unaffected. If the result is zero, the next instruction after ISZ is 
      executed. If the result is different from 0, program control is transferred to the 
      instruction located at the 8 bit address A2A2A2A2, A1A1A1A1 on the same page (ROM) 
      where the ISZ instruction is located.    
    code: 0111 RRRR
    instructions:
      - R{R} + 1 --> R{R}
      - R{R} == 0 ? PC +2 --> PC
      - R{R} != 0 ? rom(PC+1) --> {PM,PL} 
  add:
    description: |
      The 4 bit content of the designated index register is added to the content of the 
      accumulator with carry. The result is stored in the accumulator. The carry/link is 
      set to 1 if a sum greater than 15 was generated to indicate a carry out; otherwise, 
      the carry/link is set to 0. The 4 bit content of the index register is unaffected.
    code: 1000 RRRR
    instructions:
      - R{R} + ACC + CY --> {CY,ACC}
      - PC +1 --> PC
  sub:
    description: |
      The 4 bit content of the designated index register is complemented (ones complement) 
      and added to content of the accumulator with borrow and the result is stored in the 
      accumulator. If a borrow is generated, the carry bit is set to 0; otherwise, it is 
      set to 1. The 4 bit content of the index register is unaffected.    
    code: 1001 RRRR
    instructions:
      - (~R{R} + ACC + ~CY) --> {CY,ACC}
      - PC +1 --> PC
  ld:
    description: |
      The 4 bit content of the designated index register (RRRR) is loaded into 
      accumulator. The previous contents of the accumulator are lost. The 4 bit 
      content of the index register and the carry/link bit are unaffected.
    code: 1010 RRRR
    instructions: 
      - R{R} --> ACC
      - PC+1 --> PC
  xch:
    description: |
      The 4 bit content of designated index register is loaded into the accumulator. 
      The prior content of the accumulator is loaded into the designed register. 
      The carry/link bit is unaffected.
    code: 1011 RRRR
    instructions:
      - (ACC, R{R}) --> {R{R}, ACC}
      - PC +1 --> PC
  bbl:
    description: |
      The program counter (address stack) is pushed down one level. Program control 
      transfers to the next instruction following the last jump to subroutine (JMS) 
      instruction. The 4 bits of data DDDD stored in the OPA portion of the instruction 
      are loaded to the accumulator.

      BBL is used to return from subroutine to main program.
    code: 0110 DDDD
    instructions:
      - D --> ACC
      - STACK0 --> PC
      - STACK1 --> STACK0
      - STACK2 --> STACK1
      - 0 --> STACK2
  ldm:
    description: |
      The 4 bits of data, DDDD stored in the OPA field of instruction
      word are loaded into the accumulator. The previous contents of the
      accumulator are lost. The carry/link bit is unaffected.
    code: 1101 DDDD
    instructions: 
      - D --> ACC
      - PC+1 --> PC
  wrm:
    description: |
      The accumulator content is written into the previously selected RAM 
      main memory character location. The accumulator and carry/link are unaffected.
    code: 1110 0000
    instructions:
   rar:
    description: |
      The content of the accumulator and carry/link are rotated right.
    code: 1111 0110
    instructions:
      - (CY,ACC) --> {ACC,CY}
      - PC+1 --> PC

display:  |
    "         STACK                REGISTERS\n\
         PC 0x{PC}          R0 R1 0x{R0} 0x{R1}   R8 R9 0x{R8} 0x{R9}\n\
    LEVEL 1 0x{STACK0}          R2 R3 0x{R2} 0x{R3}   RA RB 0x{R10} 0x{R11}\n\
    LEVEL 2 0x{STACK1}          R4 R5 0x{R4} 0x{R5}   RA RB 0x{R12} 0x{R13}\n\
    LEVEL 3 0x{STACK2}          R6 R7 0x{R6} 0x{R7}   RA RB 0x{R14} 0x{R15}\n\
    \n\
    ACCUMULATOR: {ACC} [0b{ACC}]  CARRY: 0b{CY}\n\
    SRC: 0x{SRC}\n"
