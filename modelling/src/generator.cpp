#include "../include/description.hpp"
#include <filesystem>
#include <fstream>
#include <iostream>
#include <cmath>

std::string Description::CPU::generateHeader()
{
    std::string header =
        "//Autogenerated header for the " + name + "\n"
                                                   "#pragma once\n\n"
                                                   "#include <string>\n"
                                                   "#include <map>\n"
                                                   "#include <vector>\n\n"
                                                   "#include \"AddressInfo.hpp\"\n"
                                                   "#include \"AddressInfos.hpp\"\n"
                                                   "#include \"bitset.hpp\"\n\n";

    return header;
}

std::string Description::CPU::generateFunctions()
{
    std::string functions = "";
    std::string map =
        "   std::map<int, Intel4004::op> ops = \n"
        "   {\n";

    functions += "   bitset get(std::string);\n";
    functions += "   void set(AddressInfo info, bitset data) {set_mem(&memory[0], info, data);};\n";

    for (auto &i : instructions)
    {
        functions += "   void " + i.name + "();\n";

        for (auto code : i.getOPCodes())
            map += "      {0b" + code + ", &" + name + "::" + i.name + "},\n";
    }

    map += "   };\n";
    return functions + "\n" + map;
}
std::string Description::CPU::generateMemory()
{
    std::string ret = "   uint8_t memory[" +
                      std::to_string((int)std::ceil(total_mem / 8.0)) + "] = {};\n";

    return ret;
}

std::string getMemoryNames(Description::Memory m)
{
    std::string ret = "";
    ret += m.name + ",";
    for (auto mem : m.submemory)
        ret += getMemoryNames(mem);

    return ret;
}

std::string describeMemoryMap(Description::Memory m)
{
    std::string ret = "{\"" + m.name + "\", " + m.name + "},\n";
    for (auto mem : m.submemory)
        ret += describeMemoryMap(mem);

    return ret;

}


std::string describeMemory(Description::Memory m)
{
    std::string ret = "const AddressInfo " + m.name + "{" + std::to_string(m.byteoffset) + ", " + std::to_string(m.bitoffset) + ", " + std::to_string(m.size) + "};\n";
    for (auto mem : m.submemory)
        ret += describeMemory(mem);

    return ret;
}

std::string Description::CPU::generateAddressInfos()
{
    std::string ret = "#pragma once\n#include \"AddressInfo.hpp\"\n";

    ret += "#include <map>\n\n";
    for (auto m : memory)
    {
        ret += describeMemory(m);
        ret += "\n\n";
    }

    ret += "[[maybe_unused]] const auto mems = {";

    for (auto m : memory)
        ret += getMemoryNames(m);
    ret += "};\n\n";

    ret += "std::map<std::string, AddressInfo> addresses = {\n";
        for (auto m : memory)
        ret += describeMemoryMap(m);

    ret += "};\n\n";

    return ret;
}

std::string Description::CPU::generateClass()
{
    std::string c = // class
        "class " + name + "\n"
                          "{\n"
                          "   public:"
                          //   "   " + name + "();\n\n"
                          "   //our internal CPU memory (registers, PC ..)\n" +
        generateMemory() + ";\n\n"
                           "   //function pointer\n"
                           "   typedef void (" +
        name + "::*op)();\n"
               "\n"
               "   //functions\n" +
        generateFunctions() +
        "};";

    return c;
}

void Description::CPU::generate()
{

    std::filesystem::copy("resources/", "out/", std::filesystem::copy_options::recursive | std::filesystem::copy_options::overwrite_existing);

    std::filesystem::create_directory("out");
    std::ofstream hpp("out/" + name + ".hpp",std::ios::trunc);

    hpp << generateHeader();
    hpp << generateClass();
    hpp.close();

    std::ofstream info("out/AddressInfos.hpp",std::ios::trunc);
    info << generateAddressInfos();
    info.close();

    std::ofstream cpp("out/" + name + ".cpp",std::ios::trunc);
    cpp << "#include \"" + name + ".hpp\"\n";

    cpp << "bitset "+name+"::get(std::string resource)\n"
            "{\n"
            "if(addresses.contains(resource)\n"
            "   return get_mem(&memory[0], addresses[resource]);\n"
            "return bitset(resource);\n"
     "}\n";
    for (auto i : instructions)
    {
        cpp << "// " << i.description << "\n";
        cpp << i.getCode(name) << "\n";
    }
    cpp.close();
}