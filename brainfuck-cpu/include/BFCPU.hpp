//Autogenerated header for the BFCPU
#pragma once

#include <stdarg.h>
#include <stddef.h>
#include "settings.hpp"
#ifndef NO_CPPSTD
#include <string>
#include <vector>

#endif
#include "AddressInfo.hpp"
#include "AddressInfos.hpp"
#include "bitset.hpp"

class BFCPU
{
   public:   //our internal CPU memory (registers, PC ..)
   uint8_t memory[4] = {};

   BFCPU();

   //function pointer
   typedef void (BFCPU::*op)();

void simulate(size_t bytes = 1);
char* display();
#ifndef NO_CPPSTD
std::string json();
#endif
bitset fetch();
bitset get(AddressInfo info);
void set(bitset data, AddressInfo info);
void set(bitset data, int nums, const AddressInfo* infos);
void set(bitset data, bitset& dest);
/* rom */
bitset rom_mem[256];
bitset& rom(AddressInfo info);
bitset& rom(bitset index);
#ifndef NO_CPPSTD
void flash_rom(std::vector<bitset> data);
#endif
void flash_rom(bitset* data, size_t length);

/* band */
bitset band_mem[256];
bitset& band(AddressInfo info);
bitset& band(bitset index);
#ifndef NO_CPPSTD
void flash_band(std::vector<bitset> data);
#endif
void flash_band(bitset* data, size_t length);

void bin(AddressInfo info, char* addr);
void hex(AddressInfo info, char* addr);
void dec(AddressInfo info, char* addr);
   //functions
   template <size_t C>
   void nop();
   template <size_t C>
   void right();
   template <size_t C>
   void left();
   template <size_t C>
   void inc();
   template <size_t C>
   void dec();
   template <size_t C>
   void print();
   template <size_t C>
   void read();
   template <size_t C>
   void loop();
   template <size_t C>
   void ret();

static BFCPU::op ops[256];

char* str = NULL;};