//Autogenerated header for the Intel6502
#pragma once

#include <stdarg.h>
#include <stddef.h>
#include "settings.hpp"
#ifndef NO_CPPSTD
#include <string>
#include <vector>

#endif
#include "AddressInfo.hpp"
#include "AddressInfos.hpp"
#include "bitset.hpp"

class Intel6502
{
   public:   //our internal CPU memory (registers, PC ..)
   uint8_t memory[7] = {};

   Intel6502();

   //function pointer
   typedef void (Intel6502::*op)();

void simulate(size_t bytes = 1);
char* display();
#ifndef NO_CPPSTD
std::string json();
#endif
bitset fetch();
bitset get(AddressInfo info);
void set(bitset data, AddressInfo info);
void set(bitset data, int nums, const AddressInfo* infos);
void set(bitset data, bitset& dest);
/* mem */
bitset mem_mem[65536];
bitset& mem(AddressInfo info);
bitset& mem(bitset index);
#ifndef NO_CPPSTD
void flash_mem(std::vector<bitset> data);
#endif
void flash_mem(bitset* data, size_t length);

/* ram */
bitset ram_mem[2048];
bitset& ram(AddressInfo info);
bitset& ram(bitset index);
#ifndef NO_CPPSTD
void flash_ram(std::vector<bitset> data);
#endif
void flash_ram(bitset* data, size_t length);

void bin(AddressInfo info, char* addr);
void hex(AddressInfo info, char* addr);
void dec(AddressInfo info, char* addr);
   //functions
   template <size_t C>
   void adc_immediate();
   template <size_t C>
   void adc_zeropage();
   template <size_t C>
   void adc_zeropage_x();
   template <size_t C>
   void adc_absolute();
   template <size_t C>
   void adc_absolute_x();
   template <size_t C>
   void adc_absolute_y();
   template <size_t C>
   void adc_indirect_x();
   template <size_t C>
   void adc_indirect_y();
   template <size_t C>
   void and_immediate();
   template <size_t C>
   void and_zeropage();
   template <size_t C>
   void and_zeropage_x();
   template <size_t C>
   void and_absolute();
   template <size_t C>
   void and_absolute_x();
   template <size_t C>
   void and_absolute_y();
   template <size_t C>
   void and_indirect_x();
   template <size_t C>
   void and_indirect_y();
   template <size_t C>
   void asl_accumulator();
   template <size_t C>
   void asl_zeropage();
   template <size_t C>
   void asl_zeropage_x();
   template <size_t C>
   void asl_absolute();
   template <size_t C>
   void asl_absolute_x();
   template <size_t C>
   void bcc_relative();
   template <size_t C>
   void bcs_relative();
   template <size_t C>
   void beq_relative();
   template <size_t C>
   void bmi_relative();
   template <size_t C>
   void bne_relative();
   template <size_t C>
   void bpl_relative();
   template <size_t C>
   void bvc_relative();
   template <size_t C>
   void bvs_relative();
   template <size_t C>
   void clc_implied();
   template <size_t C>
   void cld_implied();
   template <size_t C>
   void cli_implied();
   template <size_t C>
   void clv_implied();
   template <size_t C>
   void cmp_immediate();
   template <size_t C>
   void cmp_zeropage();
   template <size_t C>
   void cmp_zeropage_x();
   template <size_t C>
   void cmp_absolute();
   template <size_t C>
   void cmp_absolute_x();
   template <size_t C>
   void cmp_absolute_y();
   template <size_t C>
   void cmp_indirect_x();
   template <size_t C>
   void cmp_indirect_y();
   template <size_t C>
   void inx_implied();
   template <size_t C>
   void jmp_absolute();
   template <size_t C>
   void lda_immediate();
   template <size_t C>
   void lda_absolute();
   template <size_t C>
   void lsr_accumulator();
   template <size_t C>
   void lsr_zeropage();
   template <size_t C>
   void lsr_zeropage_x();
   template <size_t C>
   void lsr_absolute();
   template <size_t C>
   void lsr_absolute_x();
   template <size_t C>
   void ora_immediate();
   template <size_t C>
   void ora_zeropage();
   template <size_t C>
   void ora_zeropage_x();
   template <size_t C>
   void ora_absolute();
   template <size_t C>
   void ora_absolute_x();
   template <size_t C>
   void ora_absolute_y();
   template <size_t C>
   void ora_indirect_x();
   template <size_t C>
   void ora_indirect_y();
   template <size_t C>
   void rol_accumulator();
   template <size_t C>
   void rol_zeropage();
   template <size_t C>
   void rol_zeropage_x();
   template <size_t C>
   void rol_absolute();
   template <size_t C>
   void rol_absolute_x();
   template <size_t C>
   void ror_accumulator();
   template <size_t C>
   void ror_zeropage();
   template <size_t C>
   void ror_zeropage_x();
   template <size_t C>
   void ror_absolute();
   template <size_t C>
   void ror_absolute_x();
   template <size_t C>
   void sta_absolute();

static Intel6502::op ops[256];

char* str = NULL;};